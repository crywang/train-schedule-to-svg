wget --no-check-certificate https://kyfw.12306.cn/otn/resources/js/query/train_list.js

https://kyfw.12306.cn/otn/resources/js/query/train_list.js?scriptVersion=1.0
https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9031
https://kyfw.12306.cn/otn/resources/js/framework/favorite_name.js
https://kyfw.12306.cn/otn/resources/js/query/qss.js

import json
f = open('train_list.js','r',encoding= 'utf8')
f = open('train_list.js','r')
f.read(16)
data = f.read()
t = json.loads(data)
t['2017-12-09']['Z'][0]
print(t['2017-12-09']['Z'][0]['station_train_code'])
t['2017-12-09']['Z'][0]['train_no']

for i in range(len(t['2017-12-09']['Z'])):
    print(t['2017-12-09']['Z'][i])

z = t['2017-12-09']['Z']
z = sorted(z,key=lambda x:x['train_no'])
for i in range(len(z)):
    print(z[i]['station_train_code'])


http://172.104.124.155/kyfw.12306.cn/otn/czxx/queryByTrainNo?train_no=24000T56850P&from_station_telecode=BJP&to_station_telecode=QTP&depart_date=2018-04-04

{"c_name":"CLeftTicketUrl","c_url":"leftTicket/queryO","status":false}

a.data.result[45].split("|")

1	buttonTextInfo	预订
2	station_train_code
3	train_no
4	start_telecode
5	end_telecode
6	from_telecode
7	to_telecode
8	start_time
9	arrive_time
10	lishi	during
11
12 
13 date

15
16
17



21 RW19
22 一人软包
23 RW/WR


26	无座

28		YW
29		YZ
30		ZE
31		ZY
32	swz_num	SW
33		WY
34	seat_feature	席别
35	yp_ex	席别 


https://kyfw.12306.cn/otn/leftTicket/queryA?leftTicketDTO.train_date=2018-04-05&leftTicketDTO.from_station=BJP&leftTicketDTO.to_station=SHH&purpose_codes=ADULT


  function b4(ct, cv) {
    var cs = [];
    for (var cr = 0; cr < ct.length; cr++) {
      var cw = [];
      var cq = ct[cr].split("|");
      cw.secretHBStr = cq[36];
      cw.secretStr = cq[0];
      cw.buttonTextInfo = cq[1];
      var cu = [];
      cu.train_no = cq[2];
      cu.station_train_code = cq[3];
      cu.start_station_telecode = cq[4];
      cu.end_station_telecode = cq[5];
      cu.from_station_telecode = cq[6];
      cu.to_station_telecode = cq[7];
      cu.start_time = cq[8];
      cu.arrive_time = cq[9];
      cu.lishi = cq[10];
      cu.canWebBuy = cq[11];
      cu.yp_info = cq[12];
      cu.start_train_date = cq[13];
      cu.train_seat_feature = cq[14];
      cu.location_code = cq[15];
      cu.from_station_no = cq[16];
      cu.to_station_no = cq[17];
      cu.is_support_card = cq[18];
      cu.controlled_train_flag = cq[19];
      cu.gg_num = cq[20] ? cq[20] : "--";
      cu.gr_num = cq[21] ? cq[21] : "--";
      cu.qt_num = cq[22] ? cq[22] : "--";
      cu.rw_num = cq[23] ? cq[23] : "--";
      cu.rz_num = cq[24] ? cq[24] : "--";
      cu.tz_num = cq[25] ? cq[25] : "--";
      cu.wz_num = cq[26] ? cq[26] : "--";
      cu.yb_num = cq[27] ? cq[27] : "--";
      cu.yw_num = cq[28] ? cq[28] : "--";
      cu.yz_num = cq[29] ? cq[29] : "--";
      cu.ze_num = cq[30] ? cq[30] : "--";
      cu.zy_num = cq[31] ? cq[31] : "--";
      cu.swz_num = cq[32] ? cq[32] : "--";
      cu.srrb_num = cq[33] ? cq[33] : "--";
      cu.yp_ex = cq[34];
      cu.seat_types = cq[35];
      cu.exchange_train_flag = cq[36];
      cu.from_station_name = cv[cq[6]];
      cu.to_station_name = cv[cq[7]];
      cw.queryLeftNewDTO = cu;
      cs.push(cw)
    }
    return cs
  }

#!/usr/bin/python  
# -*- coding: <encoding name> -*-
#python3.5.3 win10 64bit MSC v.1900 64 bit (AMD64)
#from __future__ import print_function
import requests #
import webbrowser #open browser
import re
import json
import math
import random
import time
import os     #for cls

def getmin(str):
    try:
        a,b=str.split(':')[0:2]
        return int(a)*60+int(b);
    except:
        return -1;

def getStation(fn):
    #f = open(fn,'r',encoding = 'utf8'); #py3
    with open(fn,'r') as f: #py2
        str=f.read();
    a=re.findall(r'\'\@([^\']+)\'', str , re.I|re.M)[0];
    s = a.split('@');
    for i in range(len(s)):
        s[i] = s[i].split('|');
    s.append(["tsn", "唐山南", "TNP", "tangshannan", "tsn", "-1"]);
    s.append(["gye", "古冶", "GYP", "guye", "gy", "-1"]);
    s.append(["jlo", "九龙", "JLO", "jiulong", "jl", "-1"]);
    s.append(['jsw', '金山卫', 'BGH', 'jinshanwei', 'jsw', '-1']);
    s.append(['mji', '梅江', 'MKQ', 'meijiang', 'mj', '-1']);
    s.append(['ylo', '元龙', 'YLY', 'yuanlong', 'yl', '-1']);
    s.append(['bdl', '八达岭', 'ILP', 'badaling', 'bdl', '-1']);
    s.append(['nsb', '南山北', 'NBQ', 'nanshanbei', 'nsb', '-1']);
    s.append(['', '车墩', 'CDH', 'chedun', 'cd', '-1']);
    s.append(['', '羊木', 'YMJ', 'yangmu', 'ym', '-1']);
    return s;

def telecode(str):
    for i in range(len(station)):
        if str ==  station[i][1]:
            return station[i][2];
    print(str)
    return '';

def getTimeTable(fn):
    #f = open(fn,'r',encoding= 'utf8') #py3
    with open(fn,'r') as f: #py2
        f.read(16);
        data = f.read();
    return json.loads(data);

def processA(a):
    match = re.findall(r'(.*)\((.*)-(.*)\)', a['station_train_code'] , re.I|re.M)[0];
    t1 = telecode(match[1].encode('utf-8'));
    t2 = telecode(match[2].encode('utf-8'));
    if not t1:
        print(match[1].encode('utf-8') + " telecode not found!");
        return '';
    if not t2:
        print(match[2].encode('utf-8') + " telecode not found!");
        return '';
    url = "https://kyfw.12306.cn/otn/czxx/queryByTrainNo?train_no="+ a['train_no'] +"&from_station_telecode="+ t1 +"&to_station_telecode="+ t2 +"&depart_date=" + date;
    #header = {"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0"}
    header = {"User-Agent":"Netscape 5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"}
    try:
        resp = requests.get(url,headers=header);
    except requests.exceptions.ConnectionError:
        print('ConnectionError ' + match[0].encode('utf-8'));
        return '';
    body = resp.content.decode('utf-8');   #bytes -> str (ucs2)
    try:
        sch = json.loads(body);
    except ValueError:
        print('ValueError ' + match[0].encode('utf-8'));
        return '';
    if sch['status'] == True and sch['httpstatus'] == 200 and len(sch['data']['data']) :
        with open('sch/'+a['train_no'].encode('utf-8')+'.json','wb') as f:
            f.write(resp.content)
        print(match[0].encode('utf-8') + ' ' + str(len(sch['data']['data'])));
        return match[0].encode('utf-8');
    else:
        print ("data error " + match[0].encode('utf-8'));
        return '';


station = getStation('station_name.js');
t = getTimeTable('train_list.js');
date = '2018-04-13' #time.strftime("%Y-%m-%d");

for type in t[date]:
    for i in range(0,len(t[date][type])):
        a = t[date][type][i];
        if os.path.exists('sch/'+a['train_no'].encode('utf-8')+'.json'):
            f = open('sch/'+a['train_no'].encode('utf-8')+'.json','r');
            data = f.read()
            sch = json.loads(data);
            if len(sch['data']['data']) == 0:
                print(a['train_no'].encode('utf-8') + " zero");
                processA(t[date][type][i]);
            else:
                print(a['train_no'].encode('utf-8') + ' local');
        else:
            r = processA(t[date][type][i]);

###

for i in range(0,len(t[date]['G'])):
    r = processA(t[date]['G'][i]);
    if len(r) == 0:
        print("error " + i);
        break;
    time.sleep(2+random.random()*2) #time in s

processA(t[date]['G'][2]);
processA(t[date]['O'][468]);
processA(t[date]['O'][469]);

#查找位置
for type in t[date]:
    for i in range(0,len(t[date][type])):
        if ('K7651' == re.findall(r'(.*)\((.*)-(.*)\)', t[date][type][i]['station_train_code'] , re.I|re.M)[0][0] ):
            print("t[\'" + type.encode('utf-8') + "\'][\'" + str(i) + "\']")

#telecode('九龙');
#k = t.keys();
#k.sort() 
#print(t[date]['G'][0]['station_train_code']);
#t[date]['Z'][0]['train_no'];
#a = t[date]['Z'][0] #test


wget -P --no-check-certificate -O /var/ftp/station_name.js https://kyfw.12306.cn/otn/resources/js/framework/station_name.js
'''
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
  File "<stdin>", line 6, in processA
  File "/usr/lib64/python2.7/json/__init__.py", line 338, in loads
    return _default_decoder.decode(s)
  File "/usr/lib64/python2.7/json/decoder.py", line 366, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib64/python2.7/json/decoder.py", line 384, in raw_decode
    raise ValueError("No JSON object could be decoded")
ValueError: No JSON object could be decoded
'''

'''
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
  File "<stdin>", line 5, in processA
  File "/usr/lib/python2.7/site-packages/requests/api.py", line 72, in get
    return request('get', url, params=params, **kwargs)
  File "/usr/lib/python2.7/site-packages/requests/api.py", line 58, in request
    return session.request(method=method, url=url, **kwargs)
  File "/usr/lib/python2.7/site-packages/requests/sessions.py", line 508, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/lib/python2.7/site-packages/requests/sessions.py", line 618, in send
    r = adapter.send(request, **kwargs)
  File "/usr/lib/python2.7/site-packages/requests/adapters.py", line 490, in send
    raise ConnectionError(err, request=request)
requests.exceptions.ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))
'''

'2018-04-11'
88000075830A
马海
马海 telecode not found!
